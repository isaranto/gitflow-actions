name: Create patch release
on: workflow_dispatch

jobs:
  draft-new-release:
    name: "Create release branch + Bump Version"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com
      # This step will differ depending on your project setup
      # Fortunately, yarn has a built-in command for doing this!
      - name: Bump version in package.json
        run: |
          yarn version --patch --no-git-tag-version
          VERSION=$(jq -r .version package.json)
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Create release branch
        run: git checkout -b release/${{ env.RELEASE_VERSION }}
      
      - name: Commit changelog and manifest files
        id: make-commit
        run: |
          git add package.json
          git commit --message "Prepare release ${{ env.RELEASE_VERSION }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"
      
      - name: Push new branch
        run: git push origin release/${{ env.RELEASE_VERSION }}
      
      - name: Create pull request release -> master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          nl=$'\n'
          body="Hi @${{ github.actor }}! ${nl}This PR was created in response to a manual trigger of the release workflow here: \
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}. ${nl} \
          I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}. ${nl} \
          Merging this PR will create a GitHub release and upload any assets that are created as part of the release build."
          gh pr create --title "Release ${{ env.RELEASE_VERSION }} release -> master" --body "$body" --label release --base master --head release/${{ env.RELEASE_VERSION }}
      
      - name: Wait for build to succeed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "CI checks"
          timeoutSeconds: 900
          intervalSeconds: 30
      
      - name: Approve PR
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          gh pr review release/${{ env.RELEASE_VERSION }} --approve
      
      - name: Merge release -> master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge release/${{ env.RELEASE_VERSION }} --delete-branch --merge
  

  release:
    name: Publish new release
    needs: draft-new-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Extract version from version.json
        run: |
          VERSION=$(jq -r .version package.json)
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
         
      - name: Create Release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      
      - name: Create pull request master -> develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          nl=$'\n'
          git checkout master
          body="Hi @${{ github.actor }}! ${nl}This PR was created in response to a manual trigger of the release workflow here: \
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}. ${nl} \
          I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}. ${nl} \
          Merging this PR will update develop to include the latest changes from the master branch"
          gh pr create --title "Release ${{ env.RELEASE_VERSION }} master -> develop" --body "$body" --label gitflow --base develop --head master
      
      
  merge-to-develop:
    name: "Merge master -> develop"
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Approve PR
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          gh pr review master --approve

      - name: Merge master in develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge master --merge
